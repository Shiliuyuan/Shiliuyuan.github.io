<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 十六源</title>
    <link>https://shiliuyuan.github.io/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 十六源</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 11 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://shiliuyuan.github.io/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git工作流总结</title>
      <link>https://shiliuyuan.github.io/post/technology/2024/2024-09-11-git%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://shiliuyuan.github.io/post/technology/2024/2024-09-11-git%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;程序员在社会工作中，经常需要进行版本控制，对比不同版本的代码变更内容等操作。这个时候就需要用到版本控制工具Git,如何利用Git进行更有效的版本控制，确保代码的版本控制清晰，多人合作时候能够更好的解决冲突，是一个值得思考的问题。&lt;/p&gt;&#xA;&lt;p&gt;鉴于此，诞生了多种多样的Git工作流，程序员可以使用其中一种或者多种流程的组合作为一种自身或项目的提交规范，从而保证项目的稳定变更。下面将介绍几种主要的Git工作流。工作流仅作为一个基准，用于参考其设计思想，实际使用场景中可以多个工作流组合使用，也可以自由添加或者减少流程，但要注意，最好是制定一个统一的标准，团队中每个人都采用统一的工作流程，这样代码管理才不容易混乱。&lt;/p&gt;</description>
    </item>
    <item>
      <title>通用Makefile文件编写</title>
      <link>https://shiliuyuan.github.io/post/technology/2024/2024-09-06-%E9%80%9A%E7%94%A8makefile%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://shiliuyuan.github.io/post/technology/2024/2024-09-06-%E9%80%9A%E7%94%A8makefile%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/</guid>
      <description>&lt;p&gt;在学习嵌入式C语言的过程中，往往使用source insight之类的文本编辑工具编辑代码，再使用makefile进行编译，此时对于多级目录的情况，查阅资料发现网上很少有清晰的教程来写一份清晰的makefile问题，因此总结作为记录。备注：此makefile文件可以嵌入vscode进行使用。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
